<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[记于生日前]]></title>
    <url>%2F2018%2F09%2F26%2Fdiary1%2F</url>
    <content type="text"><![CDATA[毕业了，就这么毕业了。 没有任何多余的想法，只想抓紧进入岗位，抛洒一片热血。 小学六年，初中三年，高中三年，大学四年，研究生一年，6+3+3+4+1=17，17年 学生时代已经彻底翻片儿。27号我将迎来我的第 23个生日。现在很多人喜欢叫老，不知道是真觉得老，还是自嘲。 而我， 正值青春。我当然给自己做了详细的规划，描绘了未来蓝图。我也知道这路上荆棘丛生，险难不断。 生活嘛，既然想要就得付出。 我是一个喜欢并且容易暴露缺点的人，不招人喜欢，性格使然。偶尔放纵做一些低级趣味。一开始我以为这是弊端，慢慢的也发现了其中的好处。如今的我，更加悠然自得，举杯邀明月的平静心理。当然都是从苦难中摸爬滚打而来。 凌晨3点起床从曼彻斯特赶车到伯明翰见导师；睡过自习室、车站，连续一个月每天15个小时写代码；毕设9月前要求交稿，6，7两月我在国外边实习边做项目，7月完成测试；8月回国白天实习，晚上写报告；8月的南京躁动的热，晚上公司大厅没有空调，我汗流浃背；笔试14份，面试10份；光简历根据不同需要我都做了6份；7，8，9三个月期间可以说有点小付出。 这话我大多朋友都听我讲过，人生三大财富：健康，朋友，经历。 我走出校园，踏上社会，这以上三点支撑并且敦促着我。 我乐观但不盲目，我自信但不自负，我坚持但不刻板。 接触过得所有人，我或多或少从中学到了做人、做事的道理。这一切我兼收并蓄，形成我的个人价值。时常反思，时长总结，时长停下脚步看一看，这路，走的对否？ 感谢我的所有老师，国内的国外的谆谆教诲！感谢我的朋友们的建议！感谢我的女朋友的陪伴与鼓励！最感谢我的父母，将一个愚蠢的少年培育的稍微可以为社会做点贡献！ 我是宋大克， 我的人生还在继续。。。]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[关于C语言输入的探究]]></title>
    <url>%2F2018%2F09%2F25%2FC%E8%AF%AD%E8%A8%80%E8%BE%93%E5%85%A5%2F</url>
    <content type="text"><![CDATA[首先需要知道，在C语言中没有字符串类型，用字符数组处理字符串 字符串数组定义： char 数组名[a][b] 有一维，二维数组， 数组名既是数组名又是这个字符串的首地址 输入输出方法：逐个字符输入输出：%c 整个字符串输入输出：%s scanf()输入printf()输出逐个字符处理： 1234567891011121314#include&lt;stdio.h&gt;int main()&#123; char ch[5]; for (int i = 0; i &lt; 5; i++) &#123; scanf(&quot;%c&quot;, &amp;ch[i]); &#125; for (int i = 0; i &lt; 5; i++) &#123; printf(&quot;%c&quot;, ch[i]); &#125; system(&quot;pause&quot;); return 0; 整个字符串处理： 123456789#include&lt;stdio.h&gt;int main()&#123; char ch[5]; scanf(&quot;%s&quot;, ch); //无需&amp; 对于数组ch，就是首地址所以不需要取地址符 printf(&quot;%s&quot;, ch); system(&quot;pause&quot;); return 0;&#125; 说明：以字符串为单位处理时，直接使用数组名， 不需要加&amp;输入字符串时，字符个数要小于数组的长度，例如输入5个字符，定义的字符数组至少应该有6个。输入字符串时，遇到回车或者空格，输入结束，并且自动在串后面加上结束标志’\0’输出字符串时，遇到字符串结束标志”\0”，输出结束 scanf()配合%s使用，但是这种方法一次只能获取一个单词，即遇到空格等字符就会返回。比如：1i love you 输出为1i scanf就无能无力，但是我们可以用gets()gets() 和 puts() 在&lt;string.h&gt;头文件中puts()向显示器输出字符串（输出结束，自动换行，即用’\n’代替’\0’)字符串数组必须以’\0’结束 gets()gets()函数用来从标准输入设备（键盘）读取字符串直到 换行符 结束，但是换行符会被丢弃，然后再末尾添加 “\0” 字符。gets()读完结束后系统 自动会将’\n’置换成’\0’调用格式： gets(s)其中s为字符串变量（字符串数组名或者字符串指针）。以回车结束，自动加’\0’.输入串长度应小于字符数组维数，字符串中可以包含空格 gets()函数与scanf(“%s:”,&amp;s)/scanf(“%s”,s)/相似,但不完全相同，使用scanf(“%s”,&amp;s)函数输入字符串时存在一个问题，如果输入了 空格 会以为字符串结束，空格后的字符将作为下一个输入项处理，但gets()函数将接收整个字符串直到遇到换行为止。 不同点 scanf不能接受空格、制表符Tab、回车等；而gets可以 相同点 字符串接受结束后 自动加’\0’ gets()存在严重缺陷：它不会检测数组能否装的下输入行比如定义1char src[5]; 数组名就相当于一个指针，也就是数组的首地址。 如果我们输入的字符大于5，填满这5个空间后，gets()函数就会访问 未被分配 的内存空间，如果这片空间 已经有数据， 这时程序就会发生错误，而中断。C99y不建议使用，C11直接抛弃。 建议使用fgets()函数来代替gets() 函数声明： char fgets(char buf, int bufsize, FILE stream)； 注意第二个参数 bufsize, 这个参数就限制了读取的字符的个数，这就可以解决gets()函数的缺陷。 fgets()函数主要用于 读取文件， 如果要读取键盘，则stream参数应该为 stdin.需要注意的是，如果bufsize设置为n, 那么fgets()函数最多读取 n-1 个字符（包括最后的 ‘\n’，读完结束后系统将自动在最后加 ‘\0’ 为什么说“最多”，那是因为如果在之前遇到了换行符，fgets()函数也会返回。还有一点，fgets()不会自动添加换行，但是可以读取换行符。 注意：在使用fgets的时候，预设了size为N，这个时候我们最多能读取的字符串个数为N-1，剩下的会用新的fgets()来读取，看如下代码：123456789int main(int argc, char *argv[]) &#123; char str2[10]; fgets(str2,3,stdin); printf(&quot;First 2 str: %s\n&quot;,str2); printf(&quot;The length of str is: %d\n&quot;,strlen(str2)); fgets(str2,3,stdin); printf(&quot;The left str: %s\n&quot;,str2); printf(&quot;The length of str is: %d\n&quot;,strlen(str2));&#125; 输出为： 当使用gets(),输入字符串是多少个，就会输出多少个字符串，需要注意输入的字符串个数不能&gt;N,超过的部分会存在新的内存，如果那片内存有数据就会中断程序。123456int main(int argc, char *argv[]) &#123; char str2[3]; gets(str2); printf(&quot;str: %s\n&quot;,str2); printf(&quot;The length of str is: %d\n&quot;,strlen(str2));&#125; 结果为： 两种新情况： 当从键盘上输入 &lt;=N-1 个字符（包括 ‘\n’ ）时，那么字符串str会以 ‘\n\0’ 结尾，这就造成了strlen(str)比预计的大1，可以利用下面的代码将’\n’去掉： 1234if(str[strlen(str)-1] == &apos;\n&apos;)&#123; str[strlen(str)-1] = &apos;\0&apos;;&#125; 当从键盘上输入 &gt;N-1 个字符（包括’\n’)时，那么字符串会以 ‘\0’ 结尾。 再详细说明一下，输入字符大于N的情况：12345678910111213141516171819202122232425#include &lt;stdio.h&gt;#include &lt;string.h&gt;#define N 5int main()&#123; char s1[N]; char s2[N]; fgets(s1, N, stdin);// gets(s1); if(s1[strlen(s1) - 1] == &apos;\n&apos;) &#123; // 去掉换行符 s1[strlen(s1) - 1] = &apos;\0&apos;; &#125;// fflush(stdin); //清空缓冲区 fgets(s2, N, stdin);// gets(s2); if(s2[strlen(s2) - 1] == &apos;\n&apos;) &#123; // 去掉换行符 s2[strlen(s2) - 1] = &apos;\0&apos;; &#125; printf(&quot;%s %s&quot;, s1, s2); return 0;&#125; 输出结果为：12123451234 5 也就是说S1=1234， S2=5，第一个fgets只读取了1234，因为最多读取N-1个数。剩下 5’\n’ 被放入了缓冲区，当程序运行到第二个fgets的时候会直接读取缓冲区的数据，直到遇到 ‘\n’ .此时 s1=1234’\0’, s2=5’\0’.这个时候，我可以在第二个fgets前加一句 fflush(stdin)， 起到清除缓冲区的作用，后面就不会输出5了123123451234 在读取完s1之后，利用 fflush(stdin) 清除缓冲区。]]></content>
      <categories>
        <category>干货</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python中strings & lists, end关键字和循环语句]]></title>
    <url>%2F2018%2F09%2F25%2Fpython%2F</url>
    <content type="text"><![CDATA[Escape quote(“” and ‘’)‘’ and “” are the same used in pythontwo ways to escape quotes: 1.12&gt;&gt;&gt; &apos;doesn\&apos;t&apos; # use \&apos; to escape the single quote...&quot;doesn&apos;t&quot; 2.12&gt;&gt;&gt; &quot;doesn&apos;t&quot; # ...or use double quotes instead&quot;doesn&apos;t&quot; stringsWhich can be expressed in several ways: enclosed in sigle quotes ‘’ enclosed in double quotes “”\ can be used to escape quotes12345+---+---+---+---+---+---+| P | y | t | h | o | n |+---+---+---+---+---+---+0 1 2 3 4 5 6-6 -5 -4 -3 -2 -1 Notice: Python string cannot be changed, they are immutableif we need a different string, creating a new one. len() is a built-in function returns the length of a string listsLists might contain items of different types, but usually the items all have the same types.can be sliced and indexedall slice operations return a new list. (Return a new list) Unlike strings, whihc are immutable, lists are a mutable type. The content of it can be changed. append() adding new item at the end of the list Assignment to slices can change the size of the list or clear it entirely: 1234567891011121314 &gt;&gt;&gt; letters = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;]&gt;&gt;&gt; letters[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;, &apos;g&apos;]&gt;&gt;&gt; # replace some values&gt;&gt;&gt; letters[2:5] = [&apos;C&apos;, &apos;D&apos;, &apos;E&apos;]&gt;&gt;&gt; letters[&apos;a&apos;, &apos;b&apos;, &apos;C&apos;, &apos;D&apos;, &apos;E&apos;, &apos;f&apos;, &apos;g&apos;]&gt;&gt;&gt; # now remove them&gt;&gt;&gt; letters[2:5] = []&gt;&gt;&gt; letters[&apos;a&apos;, &apos;b&apos;, &apos;f&apos;, &apos;g&apos;]&gt;&gt;&gt; # clear the list by replacing all the elements with an empty list&gt;&gt;&gt; letters[:] = []&gt;&gt;&gt; letters len() also applies to lists. endend is the keyword argument can be used to avoid the newline after the output, or end the output with a different string:12345678910111213141516171819202122&gt;&gt;&gt; a, b = 0,1&gt;&gt;&gt; while b&lt;1000: print(b) a,b = b,a+b1123581321345589144233377610987 1234567&gt;&gt;&gt; a,b = 0,1&gt;&gt;&gt; while b &lt; 1000: print(b,end=&apos;,&apos;) a,b = b,a+b1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987, for statementpython for statement iterates over the items of any sequence(a list or strings), in the order that they appear in the sequence.12345678&gt;&gt;&gt; # Measure some strings:... words = [&apos;cat&apos;, &apos;window&apos;, &apos;defenestrate&apos;]&gt;&gt;&gt; for w in words:... print(w, len(w))...cat 3window 6defenestrate 12 when we want to midify the sequence we are iterating over while inside the loop. It is crucial we make a copy. Iterating over a sequence does not implicitly make a copy. The slice notation makes this especially convenient.123456&gt;&gt;&gt; for w in words[:]: # Loop over a slice copy of the entire list.... if len(w) &gt; 6:... words.insert(0, w)...&gt;&gt;&gt; words[&apos;defenestrate&apos;, &apos;cat&apos;, &apos;window&apos;, &apos;defenestrate&apos;] With for w in words:, the example would attempt to create an infinite list, inserting defenestrate over and over again. notice: We need slice notation for a copy of string or lists when we want to manipulate the sequence. while statementwe need to set a break after the excution code within the while statement, otherwise, it will generate a infinite loop.123while 1: print(1) break #stop the excution]]></content>
      <categories>
        <category>干货</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅谈python的module以及if __name__ == __main__的理解]]></title>
    <url>%2F2018%2F09%2F25%2Fmodule%2F</url>
    <content type="text"><![CDATA[ModulesA module is a file containing Python definitions and statements. (suffix .py is the file name and also the module name)Within a module, the module name(as a string) is available as the value of the global variable name if we only import the module name:1import sys In this way, we can not use the fuctions defined in sys directly, but, we are allowed to access the functions by using module name:12sys.ppp()sys.ooo() we need module name before functions. Additionaly, if we intend to use a function often, we can assign it to a local name:12ppp = sys.pppppp() More on ModulesModules can import other modules.The imported module names are placed in the importing module global symbol table.1from fibo import fib,fib2 On this condition, module name is not defined, it is not introduced. And we know the functions which we will use in the module. There is even a variant to import all names that a module defines:1from fibo import * in most cases python programmers do not use this facility since it introduces an unknow set of names into the interpreter, possibly hiding some things you have already defined.Additionally, it cause unreadable code. executing modules as scriptswhen we run a python module Within1python fibo.py&lt;arguments&gt; the code in the module will be executed, just as if you imported it, but with the mame set to “main“. By adding this code at the end of your module:123if __name__ == &quot;__main__&quot;: import sys fib(int(sys.argv[1])) you can make the file usable as a script as well as an importable module., because the code that parses the command line only runs if the module is executed as the main file:12python fibo.py 501 1 2 3 5 8 if the module is imported, the code is not run:1import fibo this is often used either to provide a convenient user interface to a module, or for testing purposes(running the module as a script executes a test suite) 程序入口像c,c++都有一个 main函数 作为程序的入口，程序的运行会从main开始。python则不同，它属于脚本语言，不像编译型语言那样先将程序编译成二进制再运行，而是动态的逐行解释运行。从脚本第一行开始运行，没有同统一的入口。 一个python源码文件除了可以被直接运行外，还可以作为模块（也就是库）被导入。不管是直接运行还是导入，最顶层的代码都会被运行（python用缩进来区分代码层次）。而事实上，有一部分代码我不希望被运行。 现在我有一个q.py文件123456PI = 3.14def main(): print(&quot;PI:&quot;,PI)main() 还有一个test.py文件：12345678from q import PIdef cal(r): return PI * ( r ** 2)def main(): print(&quot;area:&quot;,cal(2))main() 在test.py里我导入了q.py中的PI值，现在我运行test.py输出为：12PI: 3.14area: 12.56 我不想输出PI啊，只需要area就好，因为在运行test.py时候，所有包含的文件都会被运行。这个时候，if __name__ == ‘__main__’ 就派上用场了。把q.py改一下： 1234567PI = 3.14def main(): print(&quot;PI:&quot;,PI)if __name__ == &quot;__main__&quot;: main() 然后再运行test.py,结果为：1area: 12.56 终于达到了想要的结果。 if __name__ == ‘__main__’就相当于 python模拟的程序入口。 主要注意的是，python本身并没有规定这么写，这只是一种编码习惯。总的来说，由于模块之间相互引用，不同模块可能都有这样的定义。到底哪个入口程序被选中，这取决于 __name__ 的值 __name____name__是内置变量，用于表示当前模块的名字。同时还能反映一个包的结构。 如果模块被直接运行，则代码块被运行；如果模块是被导入的，则代码块不被运行。 The module search pathWhen a module named spam is imported, the interpreter first searches for a built-in module with that name. If not found, it then search for a file named spam.py in a list of directories given by the variable sys.path, sys.path is initialized from these locations. The directory containing the input script (or the current directory when no file is specified) PYTHONPATH (a list of directory names, with the same syntax as the shell variable PATH) The installation-dependent default. The dir() functionThe built-in function dir() is used to find out which names a module defines. It returns a sorted list of strings.dir() does not list the names of built-in functions and variables. If you want a list of those, they are defined in the standard module builtins.]]></content>
      <categories>
        <category>干货</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅谈Tuple & Dictionary以及loop的几种方法]]></title>
    <url>%2F2018%2F09%2F25%2Ftuple%2F</url>
    <content type="text"><![CDATA[tupletuple is another sequence data type. A tuple consists of a number of values separated by commas.They may be input with or without parenthess.It is not possible to assign to the indivdual items of a tuple, however it is possible to create tuples which contain mutable objects, such as list. tuples are immutablelists are mutable dictionaryunlike sequences, which are indexed by a range of numbers, dictionaries are indexed by keys, which can be any immutable type; strings and numbers can always be keys. list(d.keys()) returns a list of all the keys used in the dictionary, in arbitrary order (we can use sorted(d.keys())) to sort it). To check whether a single key is in the dictionary use the in keyword looping techniquewhen looping through dictionaires, the key and correspinding value can be retrieved at the same time using the items() method.123456&gt;&gt;&gt; knights = &#123;&apos;gallahad&apos;: &apos;the pure&apos;, &apos;robin&apos;: &apos;the brave&apos;&#125;&gt;&gt;&gt; for k, v in knights.items():... print(k, v)...gallahad the purerobin the brave When looping through a sequence, the position index and corresponding value can be retrieved at the same time using the enumerate() function. 这是一个内置函数哦123456&gt;&gt;&gt; for i, v in enumerate([&apos;tic&apos;, &apos;tac&apos;, &apos;toe&apos;]):... print(i, v)...0 tic1 tac2 toe 如果不用enumerate，普通的for语句：12345a = [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]i=0for element in a: print(i,element) i = i + 1 To loop over two or more sequences at the same time, the entries can be paired with the zip() function.12345678&gt;&gt;&gt; questions = [&apos;name&apos;, &apos;quest&apos;, &apos;favorite color&apos;]&gt;&gt;&gt; answers = [&apos;lancelot&apos;, &apos;the holy grail&apos;, &apos;blue&apos;]&gt;&gt;&gt; for q, a in zip(questions, answers):... print(&apos;What is your &#123;0&#125;? It is &#123;1&#125;.&apos;.format(q, a))...What is your name? It is lancelot.What is your quest? It is the holy grail.What is your favorite color? It is blue. To loop over a sequence in reverse, first specify the sequence in a forward direction and then call the reversed() function.12345678&gt;&gt;&gt; for i in reversed(range(1, 10, 2)):... print(i)...97531 To loop over a sequence in sorted order, use the sorted() function which returns a new sorted list while leaving the source unaltered.12345678&gt;&gt;&gt; basket = [&apos;apple&apos;, &apos;orange&apos;, &apos;apple&apos;, &apos;pear&apos;, &apos;orange&apos;, &apos;banana&apos;]&gt;&gt;&gt; for f in sorted(set(basket)):... print(f)...applebananaorangepear more on conditionsin and not in check whether a value occurs(does not occur) in a sequence.is and is not compare whether two objects are really the same objectthis only matters for mutable objects like lists.]]></content>
      <categories>
        <category>干货</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python列表的相关函数]]></title>
    <url>%2F2018%2F09%2F25%2Flist%2F</url>
    <content type="text"><![CDATA[list.append(x)add an item to the end of the list. Equivalent to a[len(a):]=[x]in a list, the last item can be indexed as a[len(a)-1]When we want to add an item at the last, a[len(a):] = [] wil creat a eampt list a[len(a)]Additinally we need to notice the [x] it should be a list list.extend(iterable)append only one value, extend can append servral values.a12345[1, 2, 3, 2, 3, 555]&gt;&gt;&gt; b = [45,56565,56565,5656565,]&gt;&gt;&gt; a.extend(b)&gt;&gt;&gt; a[1, 2, 3, 2, 3, 555, 45, 56565, 56565, 5656565] list.insert(i,x)insert an item at a given positionThe i is the index of the element before which to insert.a.insert(0,x) inserts at the front of the listsa.insert(len(a),x) is equivalent to a.append(x)insert index from 112345&gt;&gt;&gt; a[1, 2, 3, 2, 3, 555, 45, 56565, 56565, 5656565]&gt;&gt;&gt; a.insert(3,8)&gt;&gt;&gt; a[1, 2, 3, 8, 2, 3, 555, 45, 56565, 56565, 5656565] list.remove(x)remove the first item from the list whose value is x. list.pop([i])remove the item at the given position in the list, and return it. If no idex is soecified, a.pop() removes and return the last item in the list.pop index from 0123456&gt;&gt;&gt; a[22, 2, 3, 8, 2, 3, 555, 45, 56565, 56565]&gt;&gt;&gt; a.pop(2)3&gt;&gt;&gt; a[22, 2, 8, 2, 3, 555, 45, 56565, 56565] pop returns a value, del no return list.clear()remove all items from the list. Equivalent to del a[:] list.count(x)return the number of times x appears in the list]]></content>
      <categories>
        <category>干货</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[set() & sort() & sorted() & range() & break & continue]]></title>
    <url>%2F2018%2F09%2F25%2Fset%2F</url>
    <content type="text"><![CDATA[set()创建一个 无序不重复 元素集，可以进行关系测试，删除重复数据，还可以计算交集，差集、并集等。set不记录元素位置或者插入点，不支持index, slice。1234567891011&gt;&gt;&gt;x = set(&apos;runoob&apos;)&gt;&gt;&gt; y = set(&apos;google&apos;)&gt;&gt;&gt; x, y(set([&apos;b&apos;, &apos;r&apos;, &apos;u&apos;, &apos;o&apos;, &apos;n&apos;]), set([&apos;e&apos;, &apos;o&apos;, &apos;g&apos;, &apos;l&apos;])) # 重复的被删除&gt;&gt;&gt; x &amp; y # 交集set([&apos;o&apos;])&gt;&gt;&gt; x | y # 并集set([&apos;b&apos;, &apos;e&apos;, &apos;g&apos;, &apos;l&apos;, &apos;o&apos;, &apos;n&apos;, &apos;r&apos;, &apos;u&apos;])&gt;&gt;&gt; x - y # 差集set([&apos;r&apos;, &apos;b&apos;, &apos;u&apos;, &apos;n&apos;])&gt;&gt;&gt; sort()用于对元列表进行排序list.sort(cmp=none, key=none, reverse=False)cmp – 可选参数，如果指定了该参数会使用该参数的方法进行排序。key –用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。reverse是排序规则，reverse=True降序，reverse=False升序（默认） notice:需要注意的是，sort的目标不能交叉，要不都是数字要不都是字符串 sort 与 sorted 区别sort 是应用在list上的方法，sorted 可以对所有可迭代的对象进行排序操作list 的 sort 方法返回的是已经存在的列表进行操作，无返回值，而内建函数sorted方法返回的是一个新的list, 而不是在原来的基础上进行操作。 sorted()sorted(iterable[, cmp[, key[, reverse]]])123456&gt;&gt;&gt;a = [5,7,6,3,4,1,2]&gt;&gt;&gt; b = sorted(a) # 保留原列表&gt;&gt;&gt; a[5, 7, 6, 3, 4, 1, 2]&gt;&gt;&gt; b[1, 2, 3, 4, 5, 6, 7] range()iterate over a sequence of numbersit is a built-in functionit generates arithmetic progressions1234567for i in range(5): print(i)01234 Notice: range(5) end with 4 not 5, because it index from 0we can also set the start and end value within range(start, end)123456range(5,10)56789 Additionally, we can also set the step size, range(start, end, stepsize)12345range（0，10，3)0369 to iterate over the indices of a sequence, we can combine range() and len()123456789a = [&apos;Mary&apos;, &apos;had&apos;, &apos;a&apos;, &apos;little&apos;, &apos;lamb&apos;] for i in range(len(a)):... print(i, a[i])...0 Mary1 had2 a3 little4 lamb break and continue Statements, and else Clauses on Loopslike in C, breaks out of the innernost enclosing for or while loop.1234567891011121314151617&gt;&gt;&gt; for n in range(2, 10):... for x in range(2, n):... if n % x == 0:... print(n, &apos;equals&apos;, x, &apos;*&apos;, n//x)... break... else:... # loop fell through without finding a factor... print(n, &apos;is a prime number&apos;)...2 is a prime number3 is a prime number4 equals 2 * 25 is a prime number6 equals 2 * 37 is a prime number8 equals 2 * 49 equals 3 * 3 notice: the else clause belongs to the for loopwhen used with a loop, the else clause has more in common with the else clause of a try statement than it does that of if statements: a try statement else clause runs when no exception occurs, and a loop else clause runs when no break occurs. continue with the next iteration of the loop:12345678910111213&gt;&gt;&gt; for num in range(2, 10):... if num % 2 == 0:... print(&quot;Found an even number&quot;, num)... continue... print(&quot;Found a number&quot;, num)Found an even number 2Found a number 3Found an even number 4Found a number 5Found an even number 6Found a number 7Found an even number 8Found a number 9 if we do not use continue12345678910111213141516&gt;&gt;&gt; for num in range(2, 10):... if num % 2 == 0:... print(&quot;Found an even number&quot;, num)... print(&quot;Found a number&quot;, num)Found an even number 2Found a number 3Found a number 3Found an even number 4Found a number 5Found a number 5Found an even number 6Found a number 7Found a number 7Found an even number 8Found a number 9Found a number 9 which means once meet the if requirements, directly start from the iteration, and do not excute the rest code. pass statementsit does nothing. It can be used when a statement is required syntactically but the program requires no action. For example:12&gt;&gt;&gt; while True:... pass # Busy-wait for keyboard interrupt This is commonly used for creating minimal classes:123&gt;&gt;&gt; class MyEmptyClass:... pass... using in place hoder for a function or conditional body. The pass is silently ignored:123&gt;&gt;&gt; def initlog(*args):... pass # Remember to implement this!... when i did testing i found an interesting thing:12345for num in range(5): if num%2 ==0: print(&quot;number&quot;,num) pass print(&quot;error&quot;) 12345678number 0errorerrornumber 2errorerrornumber 4error but when i change if to while12345for num in range(5): while num%2 ==0: print(&quot;number&quot;,num) pass print(&quot;error&quot;) the program run into infinite Loop123number 0number 0number 0 hehe, actually, not pass it will be into loop as well, just because once the while is true it keep running.123while 1: print(&quot;This is a infinite loop&quot;)print(&quot;error&quot;) in fact, once while true it runs the code whinin while infinitely, all the rest codes without while will not run. To stop thr while, just wait for the requirements false.]]></content>
      <categories>
        <category>干货</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Pythonde的format() & string conversion(repr()&str())]]></title>
    <url>%2F2018%2F09%2F25%2Finputandoutput%2F</url>
    <content type="text"><![CDATA[More control over formatting of the output than simply printing space-separated values. Using formatted string literals, or the str.format() method. str.format()此函数可以快速处理各种字符串它通过 {} 和 ： 代替 % 通过字典来设置参数的话，需要在字典名前加两个** 1234import stringsite = &#123;&quot;name&quot;:&quot;www&quot;&#125; #需要注意字典的索引名也需要加双引号哦print(&quot;网站名:&#123;name&#125;&quot;.format(**site)) 通过列表索引设置参数 1234import stringsite = [&quot;www&quot;,&quot;problem&quot;]print(&quot;网站名:&#123;0[0]&#125;,地址:&#123;0[1]&#125;&quot;.format(site)) 列表的话就需要指定位置了。 The string module contains a Template class which offers yet another way substitute values into strings. Questions: How do you convert values to strings?Luckily, Python has ways to convert any value to a string: pass it to the repr() or str() functions. str() function is meant to return representations of values which are fairly human-readable , while repr() is meant to generate representations which can be read by the interpreter.For human consumption, str() will return the same value as repr(). Many values, such as numbers or structures like lists and dictionaires, have the same representations using either function. Strings, in particular, have two distinct representations. 12345&gt;&gt;&gt; test = &quot;nihao&quot;&gt;&gt;&gt; str(test)&apos;nihao&apos;&gt;&gt;&gt; repr(test)&quot;&apos;nihao&apos;&quot; list和dictionaire输出都是一样的，在外面加了个双引号但是至于string,str直接单引号，而repr单引号外套双引号。这是两者不同。]]></content>
      <categories>
        <category>干货</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[EOF问题]]></title>
    <url>%2F2018%2F09%2F25%2Feof%2F</url>
    <content type="text"><![CDATA[先看一道字符串的题目：求字符串最后一个单词的长度12345678910111213141516171819#include &lt;stdio.h&gt; int main() &#123; char str[5000]; int i,j=0,N=0; while(scanf(&quot;%c&quot;, &amp;str[j])!=EOF) &#123; if(str[j]==&apos; &apos;) N=0; else N++; if(j&lt;4999) j++; &#125; if(N!=0) N=N-1; //为啥减一，因为字符串以\0结尾哦，要注意！！！ printf(&quot;%d&quot;,N); return 0; &#125; 在while里有个EOF，作为 读取结束 标志，来探究一下EOF：C语言中，EOF常被作为文件结束的标志。在while循环中以EOF作为文件结束标志。 linux系统下， 在输入回车换行后的空行位置，按 ctrl+d (先按ctrl键，不放，再按d键） windows系统下， 在输入回车换行后的空行位置，按 ctrl+z，再回车确认]]></content>
      <categories>
        <category>干货</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FP Presentation Structure]]></title>
    <url>%2F2018%2F08%2F30%2Fpresentation%2F</url>
    <content type="text"><![CDATA[Presentation StructureThe Background talking about the reasons why i choose this topic(relative each time visit her, she don’t know who am i, a lot of news reports people sufffer from dementia) then explore the symptom of dementia, the currently treatment for dementia. the study of elderly people cognitive functions(memory, attention, comprehension, language) VR, AR, MR comparision VR Garden Design unity 3d C# Evaluation method questionnaires(SUS, general interest, attitude, modified banos) pulse rate monitor results positive feedback perceied has a positive effect during the interaction with VR garden, participants need to using memory, thinking, attention ability, this is a way to exercise these functions, to keep brain working. and study the behavior of elderly people in virtual world. conclusion we can build the enriched environment for elderly people and keep modification. Then, apply this modification in real world. Finally, to help elderly people. pulse rate monitor shows the rate line is very smooth and no big difference. Just a littole fluctuation on wearing the headset. Explaining this for use the ner technology and exercited o new things3.]]></content>
      <categories>
        <category>干货</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[一切为了通过面试（纯干货为面试而准备）]]></title>
    <url>%2F2018%2F08%2F17%2Flearning%2F</url>
    <content type="text"><![CDATA[在这一篇中，记录的知识点会很杂,因为这是为了面试而搜索整理的，可以没事拿来读一读，或多或少都会有帮助。 数据库索引通常状况下，我们会有大量的数据需要存储，分析和处理。而当前市场上，动辄上百G的内容。对于如此大的数据，查找起来会非常的耗时耗资源，一般查找方法 12sslect * form tablewhere name &lt; 30 用这种方法，需要将数据库中的数据整体过滤一遍，才能找到符合要求的对象。当对象上千万上亿的时候，很显然我们需要寻找更优的方法。那就是索引。 索引是属于表中的列数据。是一种数据结构，我们通过查找索引来查找数据会大大提高效率。而在索引中有B-TREE, R-TREE, 哈希索引等方法，下面我一一介绍。 B-treeBalance tree，平衡树，不同于二叉树，而它又是基于二叉树发展而来。因为我们希望二叉树矮胖长，减少度。B的结点不限制于两个，可以有更多。 C++一些常用函数 itoa() strcmp(), str 构造函数 析构函数 构造函数 通俗的讲，在类中，函数名和类名相同的函数，称为构造函数。 作用： 在建立一个对象时，做某些初始化工作（赋初始值）。c++是允许同名函数，也就是允许一个类中有多个构造函数。如果一个都没有，编译器将为该类产生一个默认的构造函数。 限制： 构造函数不能指定返回类型，void也不行 参数：不带参数的构造函数，只能以固定不变的值初始化对象。带参数的构造函数灵活的多，通过传递给构造函数的参数，可以赋予对象不同的初始值。 1构造函数名（形参表） 创建对象时使用1类名 对象名 （实参表） 析构函数 析构函数也是函数名与类名相同，不过要在函数前加上~符号1234class line()&#123; ~line() //析构函数&#125; 析构函数主要是用来在消灭对象的时候调用，用来关闭文件，释放内存等。一个类只允许有一个析构函数 对象析构顺序 后构造的对象先析构 算法冒泡排序它重复走访需要排序的元素列，一次比较两个相邻的元素，按照要求（大小）来进行元素交换。最大数会换到元素顶端。**时间复杂度O（n^2). 12345678910111213141516171819202122232425262728293031#include &lt;stdio.h&gt;#define SIZE 8void bubble_sort(int a[], int n);void bubble_sort(int a[], int n)&#123; int i, j, temp; for(j = 0; j&lt; n -1 ; j++) //最大数不用比较所以n-1 for( i = 0; i&lt; n-1-j;i++) &#123; if(a[i] &gt; a[i+1]) &#123; temp = a[i]; a[i] = a[i+1]; a[i+1] = temp; &#125; &#125;&#125;int main()&#123; int number[SIZE] = &#123;95, 45, 15, 76, 87, 67,54,12&#125;; int i; bubble_sort(number, SIZE); for(i = 0; i&lt;SIZE; i++) &#123; printf(&quot;%d\n&quot;, number[i]); &#125;&#125; 快速排序快速排序是对冒泡排序的一种改进。基本思想：通过一趟排序将要排序的序列分割成独立的两部分，一部分的数据要比另一份的数据大。。然后再按照此方法对这两部分的数据进行快速排序，递归进行。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&lt;stdio.h&gt;int a[101],n; //定义全局变量，这两个变量需要在子函数中使用void quicksort(int left, int right)&#123; int i,j,t,temp; if(left&gt;right) &#123; return; &#125; temp = a[left]; //temp中存的就是基准书 i = left; j = right; while(i!=j) &#123; //顺序很重要，要先从右边开始找 while(a[j] &gt;= temp &amp;&amp; i &lt; j) j--; //再找右边的 while(a[i] &lt;= temp &amp;&amp; i &lt; j) i++; //交换两个数在数组中的位置 if(i &lt; j) &#123; t = a[i]; a[i] = a[j]; a[j] = t; &#125; &#125; //最终将基数归位 a[left] = a[i]; a[i] = temp; quicksort(left, i -1 ) //继续处理左边的，这里是一个递归的过程 quicksort(i+1, right) //继续处理右边的，这里是一个递归的过程&#125;int mian()&#123; int i,j,t; //读入数据 scanf(&quot;%d&quot;,&amp;n); for(i = 1; i &lt;= n; i++) &#123; scanf(&quot;%d&quot;, &amp;a[i]); &#125; quicksort(1,n); //快速排序调用 //输出排序后的结果 for(i=1; i&lt;=n; i++) &#123; printf(&quot;%d&quot;,a[i]); getchar(); getchar(); return 0; &#125;&#125; 快速排序的每一步处理其实就是将这一步的基准书归位 相比于冒泡排序，快速排序的每次交换是跳跃式的。每次排序的时候设置一个基准数，将小于等与基准数的数全部放在基准数的左边，大于等与的放在右边。这样每次交换的时候就不会像冒泡排序一样每次只能在相邻的数之间进行交换，交换的距离就大的多了。因此总比较和交换次数就变少了，速度自然就提高了。 当然在最坏情况下，仍然可能是相邻两个数进行交换。最差时间复杂度和冒泡排序一样都是O(n2)， 但是它的平均时间复杂度是O(nlogn). 快速排序基于“二分思想” 时间复杂度时间复杂度主要是用来进行计算并了解整个算法的时间占有，也就是占用的时间。通常我们会看到几种时间复杂度O(1), O(n), O(n2), O(logn), O(nlogn),O（2^n）等等 O（1） 是常数时间复杂度，也就是说有唯一对应的映射。 O(n) 是线性时间复杂度，我看到过一个形象的举例，有一堆水果：苹果，梨子，猕猴桃等等，我想要苹果，你就帮我拿苹果，我想要梨子你帮我拿梨子，我想要拿哪一个都有一一对应的映射。再比如，这个时候我妈买了菠萝，火龙果等其他新水果，放在之前那一堆中，但是我仍然想要苹果，你不会给我拿梨子或者火龙果，仍然是一一对应，这就是线性时间复杂度。 O(n2) 平方复杂度，不仅仅只代表平方，代表的是最高次幂，最后简化为最高次项。上面算法排序里面的冒泡排序就是平方复杂度的一个典型例子。因为我们需要在n-1次的n-j-1次里进行遍历，我们最终取得最高次幂是2，也就是n2 O(logn) 二叉树红黑树红黑树是二叉树的一种，比二叉树效率高。 malloc free与new delete的区别 malloc free是标准c++/c库函数，new delete是c++关键字。 （对象在创建的同时要自动执行构造函数，在销毁之时要自动执行析构函数）new delete会在使用的时候自动调用构造函数和析构函数，而malloc free不会，malloc需要自行调用initialize(),free需要自行调用destroy()来达到和new delete一样的效果。 俩函数都会在内存泄漏的时候，显示提示信息，但是new delete会显示具体哪一个文件哪一行， 既然new delete这么好，为啥还需要malloc free呢？？？？？ 那是因为，C语言库里面只有malloc free,c++和c经常需要配合使用，也就是说malloc free和new delete也需要配合使用。他们一样都是成对出现的 关于测试 功能测试： specifications的满足 UI测试： 用户喜好 性能测试: 打开一个网站的时间 优化测试： 哪里还需要改进]]></content>
      <categories>
        <category>干货</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Several ways to increase Python performance]]></title>
    <url>%2F2018%2F08%2F12%2Fperformance%2F</url>
    <content type="text"><![CDATA[python本身就跑不过C, 干不过C++，性能方面是个软肋。所以高效编程尤为重要。 1. import的使用 在导入需要使用到的模块之前，一定要确定，要用到模块里的哪个函数。因为直接 123import osimport numpyimport matplotlib 每次编译都会重复调用，大大降低系统速度。在确定了具体函数之后，我们可以12import numpy as npimport matplotlib.pyplot as plt 因为局部模块引用会提高运行速度 。这样的模块使用还有另一个优点，就是增强了可阅读性。 2. 使用映射来替换条件搜索提到映射，python拥有dict等，dict就是字典，顾名思义，就是查找。也就是一一对应的关系。 在Python中没有select-case语句。dict的搜索条件比if快很多，所以 当想用if的时候，尝试去使用dict吧。 1234567891011#if searchif a== 1: b = 10else a == 2: b = 20---# dict search: better performanced = &#123;1:10, 2:20, ...&#125;b = d[a] 这里强调一下dict,使用的是大括号，而且内部元素是映射关系（一一对应） 3. 减少函数调用的数量很多时候，我们需要去确认对象的类型，才能进行下一步操作。type()是常用的，如名字所示，检测类型。但是其实isinstance()最好，id()次之，type()最差 1234#determine the variable type is integertype(a) == type(0) #call the function three timestype(a) is type(0) #identity comparisionisinstance(a,(int)) #call the function performance 为了避免重复计算，避免把重复操作放到循环中 12345678#each loop needs to re-excute len(a)while i &lt; len(a): statement#put len(a) outside loopm = len(a)while i &lt; m statement 当使用模块中的函数或者对象时，from x import y比较好而不是直接import x.可以减少一次查询，解析器不需要先找到模块x,然后在模块的字典中找y 4. 使用局部变量局部变量易于维护，并且节约性能提高成本。因此尽量避免全局变量。 在模块命名空间中，将变量替换为局部变量是很有利的。比如：1ls = os.linesep 两个好处 提高程序性能，因为局部变量搜索速度快 使用短标识替换长模块变量，提高阅读性 5. 直接迭代序列元素对于序列（list, str, tuple等）。直接迭代序列元素 123a = [1,2,3]for item in a print(item) 6. 用生成器表达式替换列表解析列表解析生成整个列表，会对大量数据的迭代产生负面作用。而生成器表达式则不会，生成器表达式不会创建一个列表，相反返回一个生成器，在需要的时候生成具体数值（延迟的），这种方式对内存友好 12345#calculate the number of none-null characters in file f#list analysisl = sum([len(word) for line in f for word in line.split()])#generator expressionl = sum(len(word) for line in f for word in line.split()) 7.先编译后调用当使用函数eval()和exec()来执行代码时，最好调用代码对象（通过compile（）预先编译成字节码）而不是直接调用str,这样可以避免重复编译过程多次和提高程序性能。 正则表达式模式匹配是类似的，在执行比较和匹配前，最好将正则匹配表达式模式编译为正则表达式对象。（通过re.compile()函数） 8.模块编程模块中最高级别的Python语句(无缩进代码)将再导入模块时执行，这里有个问题，是否所有代码都需要执行? 我们需要将模块的所有功能代码放入函数中(与主程序相关的功能代码也可以放在main()函数中，主程序本身调用main()函数) 测试代码可以写在模块的main()函数中，将在主程序中检测 name 的值，如果是main(表示模块直接执行)，则调用main()函数进行测试，如果它是模块的名称，表示模块被调用，则不会执行测试。]]></content>
      <categories>
        <category>干货</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python+Sqlite3+Opencv自动化测试（STB本地服务器_页面抓取_图片对比）]]></title>
    <url>%2F2018%2F08%2F10%2Fpython-Sqlite3-Opencv%2F</url>
    <content type="text"><![CDATA[实习期间做的小项目，整理一下： STB服务器搭建起来后，需要检测显示的内容与期望匹配。这里就需要一个自动化测试工具。 Python 作为编程脚本语言，因为其中含有大量的库可以引用，会大大加快开发效率。其中的webdriver, PIL, tkinter等库将发挥巨大的作用。 在图片对比方面，使用 opencv ，因为其适用于各大主流平台，具有强移植性。 数据库本来想用MySQL, 后来发现python有自带的 SQlite3 数据库，这是一个轻量级数据库，适合处理数据量不是很大的项目，加上python有内置module,因此使用起来非常方便。以上就是这个项目的主要架构。 Specification搭建一个UI界面，将接口展示出来，方便用户进行自主配置。python有三个主流UI设计Module，这里我选择tkinter, 因为以前用过，写过一个计算器，哈哈哈。Python的UI设计确实方便，但是局限性也很明显，不那么灵活，不过对于自主测试，清楚易于使用就可以啦。 关于UI界面，留了两个接口： 想要测试的网址的URL输入 数据库里内置的tag选择（就是想要测试页面的预制图片） 关于数据库SQlite3是python内置轻量型数据库，非常适合中小型项目数据操作。其也是使用标准的SQL语句。（幸好，之前有接触过MySQL，所以上手没那么难） 建立img_set表 表中有三个组（ID, TAG, PATH）ID对应预制图片编号，TAG对应预制图片网址，PATH对应预制图片本地路径。 关于图片对比图片咋对比，首先要分析图片包含的因素，有：颜色，文理，框架，密度等。相对于这些因素，我选择了直方图计算法，来计算两个图片的密度差值。越小越相似。但是对于浏览器检测，需要精密测试，甚至字符，这种基于颜色密度的方法作罢。选择opencv的哈希算法。 关于python这一点写在最后，因为能分析的点太多了。从python脚本直接执行shell命令，进行screencap,保存到本地，名字的定义。我采用了模块化设计的方法。定义了相关函数，在UI界面交互的时候，就会触发这些函数，进行测试。python太强大，但是往往会忽略底层的东西。而这些恰恰是高精尖人才的必修。 python中需要注意的点在将本地路径导入数据库的时候，老是报错。具体错误（不识别|），或者其他的错误。加了r之后仍然报错。这是什么原因呢？经查证，需要在路径前后都加上“\”。原因后补？ 还有就是 tuple 转 list 的问题， 1[(&quot;http://baidu.com&quot;)] slect数据库之后显示的是上述输出而我们需要 1&quot;http://baidu.com&quot; 也就是不需要小括号和中括号，我用了type去测试地址类型，都显示为list，其实关于类型测试，isinstance比type好用。 这个就用到了如下方法： 12345pathset = []for row in path: finalpath = &apos;&apos;.join(row) pathset.append(finalpath)print(pathset) 这是一个非常巧妙的方法，用到了join，将list中每个元素都单独取出来，并且用空连接。最重要的有一点是，我提前定义了一个空list，将每次取出来的值以此放到空list里，这样就会出现想要的结果。 在整体开发过程中真的遇到相当多问题，比编程更重要的是 学习力 和 适应力 ，此外还有 承受力 ，加油吧少年！]]></content>
      <categories>
        <category>干货</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git基本操作]]></title>
    <url>%2F2018%2F07%2F25%2Fgit%2Fgit%2F</url>
    <content type="text"><![CDATA[github已经建了一个月了，还是不会把代码传上去最近写了不少脚本，所以趁这个机会学习一下 第一步 github官网操作 在github首页也就是官网上建立一个new repository 建好之后，右上角会有clone or download，copy那个地址 第二步 本地操作 右键想要上传的项目，点击git bash here， 进入下面页面，Test_Bluetooth即为项目名。 将刚刚建立仓库的地址克隆到本地 git clone （刚刚复制的地址） -不要括号 做完这一步就会在项目的目录里出现新建的一个文件夹，名字为刚刚在网页上建立仓库的名字。将所有的文件都放到这个新建的文件里。 cd test (test为仓库名字） git add git commit -m first(first是想要提交的信息会显示在github文件名的后面） git push -u origin master (目的是把本地仓库push到github上） 嘻嘻，是不是很简单。喜欢打赏一下呀！]]></content>
      <categories>
        <category>干货</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL我的基础理解]]></title>
    <url>%2F2018%2F07%2F23%2FMySQL%2F%E6%88%91%E7%9A%84%E5%9F%BA%E7%A1%80%E7%90%86%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[前两天入门了一下MySQL,毕竟市场上使用率最高的数据库。 我觉得吧，数据库就是一个存放和管理数据的仓库，就像商品被分类存放在不同的仓库一样，这里不过是把商品变成了数据。主要流程就是： 建立数据库，A库，B库， C库等 建立库中的表，向EXCEL中的表一样，A库甲表，A库乙表，B库丙表 建立表的列，就是分类，例如：名字、ID、电话等 给列分配数据 操作表：读取，插入，删除等 这就是一个大概的操作流程，我觉得只要多用，具体的参数都是可以熟悉的。 至于更深层次的学习挖掘，日后吧。]]></content>
      <categories>
        <category>干货</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[终于~把个人博客搭建起来了！]]></title>
    <url>%2F2018%2F07%2F22%2F%E7%BB%88%E4%BA%8E%EF%BC%81%E6%8A%8A%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%B5%B7%E6%9D%A5%E4%BA%86%EF%BC%81%2F%E7%BB%88%E4%BA%8E%EF%BC%81%E6%8A%8A%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%B5%B7%E6%9D%A5%E4%BA%86%EF%BC%81%2F</url>
    <content type="text"><![CDATA[终于把个人博客做出来了今天是7月22号周日 感受– 我很开心，激动，咳咳，困~~~以后会间歇性把我的学习笔记和感悟post上来，作为个人学术积累。 其实我。。。 比较喜欢发微博，可以来我微博互动 或者直接在本博客下面留言，欢迎探讨各类学术知识，生活分享，人生感悟。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Markdown语法总结]]></title>
    <url>%2F2018%2F07%2F22%2Fmarkdown%2FMarkdown%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[Markdown 是搭建网站必须，所以才学习的。但是在学习和应用的同时，发现这个语法精简了工作，提高了效率。因为它偏重内容而不是格式。以往我们写一遍文章，需要花比较多的时间在格式的排版上，比如页边距，行距，字体等等，而在Markdown里，使用标准定义的语法，减去了这些排版步骤，让人们将精力更多的集中在内容梳理上。这个语法规则大受欢迎是不无道理的。 一、标题 1234# 一级标题## 二级标题### 三级标题（以此类推） 这里注意：一定要在#前加空格 显示的效果为 一级标题二级标题三级标题二、字体加粗 要加粗的文字左右分别用两个*号包起来 斜体 要倾斜的文字左右分别用一个*号包起来 斜体加粗 要倾斜和加粗的文字左右分别用三个*号包起来 删除线 要加删除线的文字左右分别用两个~~号包起来 示例： 1234**这是加粗的文字***这是倾斜的文字*`***这是斜体加粗的文字***~~这是加删除线的文字~~ 效果如下：这是加粗的文字这是倾斜的文字这是斜体加粗的文字这是加删除线的文字 三、引用符号 &gt; 大于号随便几个大于号都等同于引用，至少一个，多写无妨，看心情咯。 例子： 1&gt;引用一下看看 显示： 应用一下看看 四、分割线需要三个以上的-或者* 五、图片图片需要注意，本地的有点麻烦还得弄到GitHub库，所以选择一个合适的图床来的简单方便。我用的是：SM.,MS非常好用，上传图片后有直接的Markdown链接引用。 图片的格式为： 1![图片名](图片地址) 这是图片不带链接的，带链接的跟上面引用网站的一样啦。 六、列表无序列表 -+*三种其一都可以 123-内容+内容*内容 -嗯嗯 +嗯嗯 *嗯嗯 有序列表 ···1.内容2.内容3.内容1234**列表嵌套**上级和下级之间敲三个空格 -eee aaa eee··· -eee f f 七、表格1234表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容 第二行分割表头和内容。 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略 list list list: content content content 八、代码1代码 九、流程图123456789flowst=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op&amp; flowst=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op&amp;]]></content>
      <categories>
        <category>干货</category>
      </categories>
  </entry>
</search>
